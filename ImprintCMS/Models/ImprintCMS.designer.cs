#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImprintCMS.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ImprintCMS")]
	public partial class ImprintCMSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertUploadedFile(UploadedFile instance);
    partial void UpdateUploadedFile(UploadedFile instance);
    partial void DeleteUploadedFile(UploadedFile instance);
    partial void InsertBinding(Binding instance);
    partial void UpdateBinding(Binding instance);
    partial void DeleteBinding(Binding instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertBookList(BookList instance);
    partial void UpdateBookList(BookList instance);
    partial void DeleteBookList(BookList instance);
    partial void InsertBookListMembership(BookListMembership instance);
    partial void UpdateBookListMembership(BookListMembership instance);
    partial void DeleteBookListMembership(BookListMembership instance);
    partial void InsertBookToArticle(BookToArticle instance);
    partial void UpdateBookToArticle(BookToArticle instance);
    partial void DeleteBookToArticle(BookToArticle instance);
    partial void InsertContactArticle(ContactArticle instance);
    partial void UpdateContactArticle(ContactArticle instance);
    partial void DeleteContactArticle(ContactArticle instance);
    partial void InsertEdition(Edition instance);
    partial void UpdateEdition(Edition instance);
    partial void DeleteEdition(Edition instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderLine(OrderLine instance);
    partial void UpdateOrderLine(OrderLine instance);
    partial void DeleteOrderLine(OrderLine instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPersonToArticle(PersonToArticle instance);
    partial void UpdatePersonToArticle(PersonToArticle instance);
    partial void DeletePersonToArticle(PersonToArticle instance);
    partial void InsertRelation(Relation instance);
    partial void UpdateRelation(Relation instance);
    partial void DeleteRelation(Relation instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    #endregion
		
		public ImprintCMSDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ImprintCMSConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ImprintCMSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ImprintCMSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ImprintCMSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ImprintCMSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Article> Articles
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<UploadedFile> UploadedFiles
		{
			get
			{
				return this.GetTable<UploadedFile>();
			}
		}
		
		public System.Data.Linq.Table<Binding> Bindings
		{
			get
			{
				return this.GetTable<Binding>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<BookList> BookLists
		{
			get
			{
				return this.GetTable<BookList>();
			}
		}
		
		public System.Data.Linq.Table<BookListMembership> BookListMemberships
		{
			get
			{
				return this.GetTable<BookListMembership>();
			}
		}
		
		public System.Data.Linq.Table<BookToArticle> BookToArticles
		{
			get
			{
				return this.GetTable<BookToArticle>();
			}
		}
		
		public System.Data.Linq.Table<ContactArticle> ContactArticles
		{
			get
			{
				return this.GetTable<ContactArticle>();
			}
		}
		
		public System.Data.Linq.Table<Edition> Editions
		{
			get
			{
				return this.GetTable<Edition>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderLine> OrderLines
		{
			get
			{
				return this.GetTable<OrderLine>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PersonToArticle> PersonToArticles
		{
			get
			{
				return this.GetTable<PersonToArticle>();
			}
		}
		
		public System.Data.Linq.Table<Relation> Relations
		{
			get
			{
				return this.GetTable<Relation>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Description;
		
		private System.DateTime _Date;
		
		private bool _IsVisible;
		
		private bool _IsOnFrontPage;
		
		private EntitySet<BookToArticle> _BookToArticles;
		
		private EntitySet<PersonToArticle> _PersonToArticles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnIsVisibleChanging(bool value);
    partial void OnIsVisibleChanged();
    partial void OnIsOnFrontPageChanging(bool value);
    partial void OnIsOnFrontPageChanged();
    #endregion
		
		public Article()
		{
			this._BookToArticles = new EntitySet<BookToArticle>(new Action<BookToArticle>(this.attach_BookToArticles), new Action<BookToArticle>(this.detach_BookToArticles));
			this._PersonToArticles = new EntitySet<PersonToArticle>(new Action<PersonToArticle>(this.attach_PersonToArticles), new Action<PersonToArticle>(this.detach_PersonToArticles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVisible", DbType="Bit NOT NULL")]
		public bool IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOnFrontPage", DbType="Bit NOT NULL")]
		public bool IsOnFrontPage
		{
			get
			{
				return this._IsOnFrontPage;
			}
			set
			{
				if ((this._IsOnFrontPage != value))
				{
					this.OnIsOnFrontPageChanging(value);
					this.SendPropertyChanging();
					this._IsOnFrontPage = value;
					this.SendPropertyChanged("IsOnFrontPage");
					this.OnIsOnFrontPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_BookToArticle", Storage="_BookToArticles", ThisKey="Id", OtherKey="ArticleId")]
		public EntitySet<BookToArticle> BookToArticles
		{
			get
			{
				return this._BookToArticles;
			}
			set
			{
				this._BookToArticles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_PersonToArticle", Storage="_PersonToArticles", ThisKey="Id", OtherKey="ArticleId")]
		public EntitySet<PersonToArticle> PersonToArticles
		{
			get
			{
				return this._PersonToArticles;
			}
			set
			{
				this._PersonToArticles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookToArticles(BookToArticle entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_BookToArticles(BookToArticle entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
		
		private void attach_PersonToArticles(PersonToArticle entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_PersonToArticles(PersonToArticle entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UploadedFile")]
	public partial class UploadedFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FileName;
		
		private string _ContentType;
		
		private System.Data.Linq.Binary _Data;
		
		private string _Category;
		
		private int _ContentLength;
		
		private EntitySet<Book> _Books;
		
		private EntitySet<Edition> _Editions;
		
		private EntitySet<Edition> _Editions1;
		
		private EntitySet<Person> _Persons;
		
		private EntitySet<Person> _Persons1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnContentTypeChanging(string value);
    partial void OnContentTypeChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnContentLengthChanging(int value);
    partial void OnContentLengthChanged();
    #endregion
		
		public UploadedFile()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			this._Editions = new EntitySet<Edition>(new Action<Edition>(this.attach_Editions), new Action<Edition>(this.detach_Editions));
			this._Editions1 = new EntitySet<Edition>(new Action<Edition>(this.attach_Editions1), new Action<Edition>(this.detach_Editions1));
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			this._Persons1 = new EntitySet<Person>(new Action<Person>(this.attach_Persons1), new Action<Person>(this.detach_Persons1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this.OnContentTypeChanging(value);
					this.SendPropertyChanging();
					this._ContentType = value;
					this.SendPropertyChanged("ContentType");
					this.OnContentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentLength", DbType="Int NOT NULL")]
		public int ContentLength
		{
			get
			{
				return this._ContentLength;
			}
			set
			{
				if ((this._ContentLength != value))
				{
					this.OnContentLengthChanging(value);
					this.SendPropertyChanging();
					this._ContentLength = value;
					this.SendPropertyChanged("ContentLength");
					this.OnContentLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UploadedFile_Book", Storage="_Books", ThisKey="Id", OtherKey="ExcerptId")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UploadedFile_Edition", Storage="_Editions", ThisKey="Id", OtherKey="SmallCoverId")]
		public EntitySet<Edition> Editions
		{
			get
			{
				return this._Editions;
			}
			set
			{
				this._Editions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UploadedFile_Edition1", Storage="_Editions1", ThisKey="Id", OtherKey="LargeCoverId")]
		public EntitySet<Edition> Editions1
		{
			get
			{
				return this._Editions1;
			}
			set
			{
				this._Editions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UploadedFile_Person", Storage="_Persons", ThisKey="Id", OtherKey="SmallImageId")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UploadedFile_Person1", Storage="_Persons1", ThisKey="Id", OtherKey="LargeImageId")]
		public EntitySet<Person> Persons1
		{
			get
			{
				return this._Persons1;
			}
			set
			{
				this._Persons1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.UploadedFile = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.UploadedFile = null;
		}
		
		private void attach_Editions(Edition entity)
		{
			this.SendPropertyChanging();
			entity.UploadedFile = this;
		}
		
		private void detach_Editions(Edition entity)
		{
			this.SendPropertyChanging();
			entity.UploadedFile = null;
		}
		
		private void attach_Editions1(Edition entity)
		{
			this.SendPropertyChanging();
			entity.UploadedFile1 = this;
		}
		
		private void detach_Editions1(Edition entity)
		{
			this.SendPropertyChanging();
			entity.UploadedFile1 = null;
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.UploadedFile = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.UploadedFile = null;
		}
		
		private void attach_Persons1(Person entity)
		{
			this.SendPropertyChanging();
			entity.UploadedFile1 = this;
		}
		
		private void detach_Persons1(Person entity)
		{
			this.SendPropertyChanging();
			entity.UploadedFile1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Binding")]
	public partial class Binding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Edition> _Editions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Binding()
		{
			this._Editions = new EntitySet<Edition>(new Action<Edition>(this.attach_Editions), new Action<Edition>(this.detach_Editions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Binding_Edition", Storage="_Editions", ThisKey="Id", OtherKey="BindingId")]
		public EntitySet<Edition> Editions
		{
			get
			{
				return this._Editions;
			}
			set
			{
				this._Editions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Editions(Edition entity)
		{
			this.SendPropertyChanging();
			entity.Binding = this;
		}
		
		private void detach_Editions(Edition entity)
		{
			this.SendPropertyChanging();
			entity.Binding = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Book")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Subtitle;
		
		private bool _IsVisible;
		
		private string _Description;
		
		private string _Quotes;
		
		private System.Nullable<int> _ExcerptId;
		
		private int _GenreId;
		
		private bool _IsDebut;
		
		private string _ExternalPublisher;
		
		private System.Nullable<int> _ExternalReleaseYear;
		
		private string _CachedRightsHoldersText;
		
		private EntitySet<BookToArticle> _BookToArticles;
		
		private EntitySet<Edition> _Editions;
		
		private EntitySet<Relation> _Relations;
		
		private EntityRef<UploadedFile> _UploadedFile;
		
		private EntityRef<Genre> _Genre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSubtitleChanging(string value);
    partial void OnSubtitleChanged();
    partial void OnIsVisibleChanging(bool value);
    partial void OnIsVisibleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnQuotesChanging(string value);
    partial void OnQuotesChanged();
    partial void OnExcerptIdChanging(System.Nullable<int> value);
    partial void OnExcerptIdChanged();
    partial void OnGenreIdChanging(int value);
    partial void OnGenreIdChanged();
    partial void OnIsDebutChanging(bool value);
    partial void OnIsDebutChanged();
    partial void OnExternalPublisherChanging(string value);
    partial void OnExternalPublisherChanged();
    partial void OnExternalReleaseYearChanging(System.Nullable<int> value);
    partial void OnExternalReleaseYearChanged();
    partial void OnCachedRightsHoldersTextChanging(string value);
    partial void OnCachedRightsHoldersTextChanged();
    #endregion
		
		public Book()
		{
			this._BookToArticles = new EntitySet<BookToArticle>(new Action<BookToArticle>(this.attach_BookToArticles), new Action<BookToArticle>(this.detach_BookToArticles));
			this._Editions = new EntitySet<Edition>(new Action<Edition>(this.attach_Editions), new Action<Edition>(this.detach_Editions));
			this._Relations = new EntitySet<Relation>(new Action<Relation>(this.attach_Relations), new Action<Relation>(this.detach_Relations));
			this._UploadedFile = default(EntityRef<UploadedFile>);
			this._Genre = default(EntityRef<Genre>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subtitle", DbType="NVarChar(MAX)")]
		public string Subtitle
		{
			get
			{
				return this._Subtitle;
			}
			set
			{
				if ((this._Subtitle != value))
				{
					this.OnSubtitleChanging(value);
					this.SendPropertyChanging();
					this._Subtitle = value;
					this.SendPropertyChanged("Subtitle");
					this.OnSubtitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVisible", DbType="Bit NOT NULL")]
		public bool IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quotes", DbType="NVarChar(MAX)")]
		public string Quotes
		{
			get
			{
				return this._Quotes;
			}
			set
			{
				if ((this._Quotes != value))
				{
					this.OnQuotesChanging(value);
					this.SendPropertyChanging();
					this._Quotes = value;
					this.SendPropertyChanged("Quotes");
					this.OnQuotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExcerptId", DbType="Int")]
		public System.Nullable<int> ExcerptId
		{
			get
			{
				return this._ExcerptId;
			}
			set
			{
				if ((this._ExcerptId != value))
				{
					if (this._UploadedFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExcerptIdChanging(value);
					this.SendPropertyChanging();
					this._ExcerptId = value;
					this.SendPropertyChanged("ExcerptId");
					this.OnExcerptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreId", DbType="Int NOT NULL")]
		public int GenreId
		{
			get
			{
				return this._GenreId;
			}
			set
			{
				if ((this._GenreId != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIdChanging(value);
					this.SendPropertyChanging();
					this._GenreId = value;
					this.SendPropertyChanged("GenreId");
					this.OnGenreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDebut", DbType="Bit NOT NULL")]
		public bool IsDebut
		{
			get
			{
				return this._IsDebut;
			}
			set
			{
				if ((this._IsDebut != value))
				{
					this.OnIsDebutChanging(value);
					this.SendPropertyChanging();
					this._IsDebut = value;
					this.SendPropertyChanged("IsDebut");
					this.OnIsDebutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalPublisher", DbType="NVarChar(50)")]
		public string ExternalPublisher
		{
			get
			{
				return this._ExternalPublisher;
			}
			set
			{
				if ((this._ExternalPublisher != value))
				{
					this.OnExternalPublisherChanging(value);
					this.SendPropertyChanging();
					this._ExternalPublisher = value;
					this.SendPropertyChanged("ExternalPublisher");
					this.OnExternalPublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalReleaseYear", DbType="Int")]
		public System.Nullable<int> ExternalReleaseYear
		{
			get
			{
				return this._ExternalReleaseYear;
			}
			set
			{
				if ((this._ExternalReleaseYear != value))
				{
					this.OnExternalReleaseYearChanging(value);
					this.SendPropertyChanging();
					this._ExternalReleaseYear = value;
					this.SendPropertyChanged("ExternalReleaseYear");
					this.OnExternalReleaseYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CachedRightsHoldersText", DbType="NVarChar(MAX)")]
		public string CachedRightsHoldersText
		{
			get
			{
				return this._CachedRightsHoldersText;
			}
			set
			{
				if ((this._CachedRightsHoldersText != value))
				{
					this.OnCachedRightsHoldersTextChanging(value);
					this.SendPropertyChanging();
					this._CachedRightsHoldersText = value;
					this.SendPropertyChanged("CachedRightsHoldersText");
					this.OnCachedRightsHoldersTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookToArticle", Storage="_BookToArticles", ThisKey="Id", OtherKey="BookId")]
		public EntitySet<BookToArticle> BookToArticles
		{
			get
			{
				return this._BookToArticles;
			}
			set
			{
				this._BookToArticles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Edition", Storage="_Editions", ThisKey="Id", OtherKey="BookId")]
		public EntitySet<Edition> Editions
		{
			get
			{
				return this._Editions;
			}
			set
			{
				this._Editions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Relation", Storage="_Relations", ThisKey="Id", OtherKey="BookId")]
		public EntitySet<Relation> Relations
		{
			get
			{
				return this._Relations;
			}
			set
			{
				this._Relations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UploadedFile_Book", Storage="_UploadedFile", ThisKey="ExcerptId", OtherKey="Id", IsForeignKey=true)]
		public UploadedFile UploadedFile
		{
			get
			{
				return this._UploadedFile.Entity;
			}
			set
			{
				UploadedFile previousValue = this._UploadedFile.Entity;
				if (((previousValue != value) 
							|| (this._UploadedFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UploadedFile.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._UploadedFile.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._ExcerptId = value.Id;
					}
					else
					{
						this._ExcerptId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UploadedFile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Book", Storage="_Genre", ThisKey="GenreId", OtherKey="Id", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._GenreId = value.Id;
					}
					else
					{
						this._GenreId = default(int);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookToArticles(BookToArticle entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_BookToArticles(BookToArticle entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_Editions(Edition entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Editions(Edition entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_Relations(Relation entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Relations(Relation entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookList")]
	public partial class BookList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private bool _IsVisible;
		
		private int _SequenceIdentifier;
		
		private EntitySet<BookListMembership> _BookListMemberships;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsVisibleChanging(bool value);
    partial void OnIsVisibleChanged();
    partial void OnSequenceIdentifierChanging(int value);
    partial void OnSequenceIdentifierChanged();
    #endregion
		
		public BookList()
		{
			this._BookListMemberships = new EntitySet<BookListMembership>(new Action<BookListMembership>(this.attach_BookListMemberships), new Action<BookListMembership>(this.detach_BookListMemberships));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVisible", DbType="Bit NOT NULL")]
		public bool IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceIdentifier", DbType="Int NOT NULL")]
		public int SequenceIdentifier
		{
			get
			{
				return this._SequenceIdentifier;
			}
			set
			{
				if ((this._SequenceIdentifier != value))
				{
					this.OnSequenceIdentifierChanging(value);
					this.SendPropertyChanging();
					this._SequenceIdentifier = value;
					this.SendPropertyChanged("SequenceIdentifier");
					this.OnSequenceIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookList_BookListMembership", Storage="_BookListMemberships", ThisKey="Id", OtherKey="BookListId")]
		public EntitySet<BookListMembership> BookListMemberships
		{
			get
			{
				return this._BookListMemberships;
			}
			set
			{
				this._BookListMemberships.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookListMemberships(BookListMembership entity)
		{
			this.SendPropertyChanging();
			entity.BookList = this;
		}
		
		private void detach_BookListMemberships(BookListMembership entity)
		{
			this.SendPropertyChanging();
			entity.BookList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookListMembership")]
	public partial class BookListMembership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EditionId;
		
		private int _BookListId;
		
		private int _SequenceIdentifier;
		
		private EntityRef<BookList> _BookList;
		
		private EntityRef<Edition> _Edition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEditionIdChanging(int value);
    partial void OnEditionIdChanged();
    partial void OnBookListIdChanging(int value);
    partial void OnBookListIdChanged();
    partial void OnSequenceIdentifierChanging(int value);
    partial void OnSequenceIdentifierChanged();
    #endregion
		
		public BookListMembership()
		{
			this._BookList = default(EntityRef<BookList>);
			this._Edition = default(EntityRef<Edition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditionId", DbType="Int NOT NULL")]
		public int EditionId
		{
			get
			{
				return this._EditionId;
			}
			set
			{
				if ((this._EditionId != value))
				{
					if (this._Edition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEditionIdChanging(value);
					this.SendPropertyChanging();
					this._EditionId = value;
					this.SendPropertyChanged("EditionId");
					this.OnEditionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookListId", DbType="Int NOT NULL")]
		public int BookListId
		{
			get
			{
				return this._BookListId;
			}
			set
			{
				if ((this._BookListId != value))
				{
					if (this._BookList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookListIdChanging(value);
					this.SendPropertyChanging();
					this._BookListId = value;
					this.SendPropertyChanged("BookListId");
					this.OnBookListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceIdentifier", DbType="Int NOT NULL")]
		public int SequenceIdentifier
		{
			get
			{
				return this._SequenceIdentifier;
			}
			set
			{
				if ((this._SequenceIdentifier != value))
				{
					this.OnSequenceIdentifierChanging(value);
					this.SendPropertyChanging();
					this._SequenceIdentifier = value;
					this.SendPropertyChanged("SequenceIdentifier");
					this.OnSequenceIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookList_BookListMembership", Storage="_BookList", ThisKey="BookListId", OtherKey="Id", IsForeignKey=true)]
		public BookList BookList
		{
			get
			{
				return this._BookList.Entity;
			}
			set
			{
				BookList previousValue = this._BookList.Entity;
				if (((previousValue != value) 
							|| (this._BookList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookList.Entity = null;
						previousValue.BookListMemberships.Remove(this);
					}
					this._BookList.Entity = value;
					if ((value != null))
					{
						value.BookListMemberships.Add(this);
						this._BookListId = value.Id;
					}
					else
					{
						this._BookListId = default(int);
					}
					this.SendPropertyChanged("BookList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Edition_BookListMembership", Storage="_Edition", ThisKey="EditionId", OtherKey="Id", IsForeignKey=true)]
		public Edition Edition
		{
			get
			{
				return this._Edition.Entity;
			}
			set
			{
				Edition previousValue = this._Edition.Entity;
				if (((previousValue != value) 
							|| (this._Edition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Edition.Entity = null;
						previousValue.BookListMemberships.Remove(this);
					}
					this._Edition.Entity = value;
					if ((value != null))
					{
						value.BookListMemberships.Add(this);
						this._EditionId = value.Id;
					}
					else
					{
						this._EditionId = default(int);
					}
					this.SendPropertyChanged("Edition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookToArticle")]
	public partial class BookToArticle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BookId;
		
		private int _ArticleId;
		
		private int _SequenceIdentifier;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBookIdChanging(int value);
    partial void OnBookIdChanged();
    partial void OnArticleIdChanging(int value);
    partial void OnArticleIdChanged();
    partial void OnSequenceIdentifierChanging(int value);
    partial void OnSequenceIdentifierChanged();
    #endregion
		
		public BookToArticle()
		{
			this._Article = default(EntityRef<Article>);
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookId", DbType="Int NOT NULL")]
		public int BookId
		{
			get
			{
				return this._BookId;
			}
			set
			{
				if ((this._BookId != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIdChanging(value);
					this.SendPropertyChanging();
					this._BookId = value;
					this.SendPropertyChanged("BookId");
					this.OnBookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleId", DbType="Int NOT NULL")]
		public int ArticleId
		{
			get
			{
				return this._ArticleId;
			}
			set
			{
				if ((this._ArticleId != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIdChanging(value);
					this.SendPropertyChanging();
					this._ArticleId = value;
					this.SendPropertyChanged("ArticleId");
					this.OnArticleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceIdentifier", DbType="Int NOT NULL")]
		public int SequenceIdentifier
		{
			get
			{
				return this._SequenceIdentifier;
			}
			set
			{
				if ((this._SequenceIdentifier != value))
				{
					this.OnSequenceIdentifierChanging(value);
					this.SendPropertyChanging();
					this._SequenceIdentifier = value;
					this.SendPropertyChanged("SequenceIdentifier");
					this.OnSequenceIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_BookToArticle", Storage="_Article", ThisKey="ArticleId", OtherKey="Id", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.BookToArticles.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.BookToArticles.Add(this);
						this._ArticleId = value.Id;
					}
					else
					{
						this._ArticleId = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookToArticle", Storage="_Book", ThisKey="BookId", OtherKey="Id", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.BookToArticles.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.BookToArticles.Add(this);
						this._BookId = value.Id;
					}
					else
					{
						this._BookId = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactArticle")]
	public partial class ContactArticle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _BodyText;
		
		private int _SequenceIdentifier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBodyTextChanging(string value);
    partial void OnBodyTextChanged();
    partial void OnSequenceIdentifierChanging(int value);
    partial void OnSequenceIdentifierChanged();
    #endregion
		
		public ContactArticle()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyText", DbType="NVarChar(MAX)")]
		public string BodyText
		{
			get
			{
				return this._BodyText;
			}
			set
			{
				if ((this._BodyText != value))
				{
					this.OnBodyTextChanging(value);
					this.SendPropertyChanging();
					this._BodyText = value;
					this.SendPropertyChanged("BodyText");
					this.OnBodyTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceIdentifier", DbType="Int NOT NULL")]
		public int SequenceIdentifier
		{
			get
			{
				return this._SequenceIdentifier;
			}
			set
			{
				if ((this._SequenceIdentifier != value))
				{
					this.OnSequenceIdentifierChanging(value);
					this.SendPropertyChanging();
					this._SequenceIdentifier = value;
					this.SendPropertyChanged("SequenceIdentifier");
					this.OnSequenceIdentifierChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Edition")]
	public partial class Edition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Number;
		
		private string _Isbn;
		
		private System.Nullable<int> _PageCount;
		
		private bool _IsForSale;
		
		private System.DateTime _ReleaseDate;
		
		private int _BindingId;
		
		private System.Nullable<int> _SmallCoverId;
		
		private System.Nullable<int> _LargeCoverId;
		
		private int _BookId;
		
		private System.Nullable<decimal> _Price;
		
		private string _Blurb;
		
		private EntitySet<BookListMembership> _BookListMemberships;
		
		private EntitySet<OrderLine> _OrderLines;
		
		private EntityRef<Binding> _Binding;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<UploadedFile> _UploadedFile;
		
		private EntityRef<UploadedFile> _UploadedFile1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnIsbnChanging(string value);
    partial void OnIsbnChanged();
    partial void OnPageCountChanging(System.Nullable<int> value);
    partial void OnPageCountChanged();
    partial void OnIsForSaleChanging(bool value);
    partial void OnIsForSaleChanged();
    partial void OnReleaseDateChanging(System.DateTime value);
    partial void OnReleaseDateChanged();
    partial void OnBindingIdChanging(int value);
    partial void OnBindingIdChanged();
    partial void OnSmallCoverIdChanging(System.Nullable<int> value);
    partial void OnSmallCoverIdChanged();
    partial void OnLargeCoverIdChanging(System.Nullable<int> value);
    partial void OnLargeCoverIdChanged();
    partial void OnBookIdChanging(int value);
    partial void OnBookIdChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnBlurbChanging(string value);
    partial void OnBlurbChanged();
    #endregion
		
		public Edition()
		{
			this._BookListMemberships = new EntitySet<BookListMembership>(new Action<BookListMembership>(this.attach_BookListMemberships), new Action<BookListMembership>(this.detach_BookListMemberships));
			this._OrderLines = new EntitySet<OrderLine>(new Action<OrderLine>(this.attach_OrderLines), new Action<OrderLine>(this.detach_OrderLines));
			this._Binding = default(EntityRef<Binding>);
			this._Book = default(EntityRef<Book>);
			this._UploadedFile = default(EntityRef<UploadedFile>);
			this._UploadedFile1 = default(EntityRef<UploadedFile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Isbn", DbType="NVarChar(50)")]
		public string Isbn
		{
			get
			{
				return this._Isbn;
			}
			set
			{
				if ((this._Isbn != value))
				{
					this.OnIsbnChanging(value);
					this.SendPropertyChanging();
					this._Isbn = value;
					this.SendPropertyChanged("Isbn");
					this.OnIsbnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageCount", DbType="Int")]
		public System.Nullable<int> PageCount
		{
			get
			{
				return this._PageCount;
			}
			set
			{
				if ((this._PageCount != value))
				{
					this.OnPageCountChanging(value);
					this.SendPropertyChanging();
					this._PageCount = value;
					this.SendPropertyChanged("PageCount");
					this.OnPageCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForSale", DbType="Bit NOT NULL")]
		public bool IsForSale
		{
			get
			{
				return this._IsForSale;
			}
			set
			{
				if ((this._IsForSale != value))
				{
					this.OnIsForSaleChanging(value);
					this.SendPropertyChanging();
					this._IsForSale = value;
					this.SendPropertyChanged("IsForSale");
					this.OnIsForSaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseDate", DbType="Date NOT NULL")]
		public System.DateTime ReleaseDate
		{
			get
			{
				return this._ReleaseDate;
			}
			set
			{
				if ((this._ReleaseDate != value))
				{
					this.OnReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._ReleaseDate = value;
					this.SendPropertyChanged("ReleaseDate");
					this.OnReleaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BindingId", DbType="Int NOT NULL")]
		public int BindingId
		{
			get
			{
				return this._BindingId;
			}
			set
			{
				if ((this._BindingId != value))
				{
					if (this._Binding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBindingIdChanging(value);
					this.SendPropertyChanging();
					this._BindingId = value;
					this.SendPropertyChanged("BindingId");
					this.OnBindingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmallCoverId", DbType="Int")]
		public System.Nullable<int> SmallCoverId
		{
			get
			{
				return this._SmallCoverId;
			}
			set
			{
				if ((this._SmallCoverId != value))
				{
					if (this._UploadedFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSmallCoverIdChanging(value);
					this.SendPropertyChanging();
					this._SmallCoverId = value;
					this.SendPropertyChanged("SmallCoverId");
					this.OnSmallCoverIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LargeCoverId", DbType="Int")]
		public System.Nullable<int> LargeCoverId
		{
			get
			{
				return this._LargeCoverId;
			}
			set
			{
				if ((this._LargeCoverId != value))
				{
					if (this._UploadedFile1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLargeCoverIdChanging(value);
					this.SendPropertyChanging();
					this._LargeCoverId = value;
					this.SendPropertyChanged("LargeCoverId");
					this.OnLargeCoverIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookId", DbType="Int NOT NULL")]
		public int BookId
		{
			get
			{
				return this._BookId;
			}
			set
			{
				if ((this._BookId != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIdChanging(value);
					this.SendPropertyChanging();
					this._BookId = value;
					this.SendPropertyChanged("BookId");
					this.OnBookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Blurb", DbType="NVarChar(MAX)")]
		public string Blurb
		{
			get
			{
				return this._Blurb;
			}
			set
			{
				if ((this._Blurb != value))
				{
					this.OnBlurbChanging(value);
					this.SendPropertyChanging();
					this._Blurb = value;
					this.SendPropertyChanged("Blurb");
					this.OnBlurbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Edition_BookListMembership", Storage="_BookListMemberships", ThisKey="Id", OtherKey="EditionId")]
		public EntitySet<BookListMembership> BookListMemberships
		{
			get
			{
				return this._BookListMemberships;
			}
			set
			{
				this._BookListMemberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Edition_OrderLine", Storage="_OrderLines", ThisKey="Id", OtherKey="EditionId")]
		public EntitySet<OrderLine> OrderLines
		{
			get
			{
				return this._OrderLines;
			}
			set
			{
				this._OrderLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Binding_Edition", Storage="_Binding", ThisKey="BindingId", OtherKey="Id", IsForeignKey=true)]
		public Binding Binding
		{
			get
			{
				return this._Binding.Entity;
			}
			set
			{
				Binding previousValue = this._Binding.Entity;
				if (((previousValue != value) 
							|| (this._Binding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Binding.Entity = null;
						previousValue.Editions.Remove(this);
					}
					this._Binding.Entity = value;
					if ((value != null))
					{
						value.Editions.Add(this);
						this._BindingId = value.Id;
					}
					else
					{
						this._BindingId = default(int);
					}
					this.SendPropertyChanged("Binding");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Edition", Storage="_Book", ThisKey="BookId", OtherKey="Id", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Editions.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Editions.Add(this);
						this._BookId = value.Id;
					}
					else
					{
						this._BookId = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UploadedFile_Edition", Storage="_UploadedFile", ThisKey="SmallCoverId", OtherKey="Id", IsForeignKey=true)]
		public UploadedFile UploadedFile
		{
			get
			{
				return this._UploadedFile.Entity;
			}
			set
			{
				UploadedFile previousValue = this._UploadedFile.Entity;
				if (((previousValue != value) 
							|| (this._UploadedFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UploadedFile.Entity = null;
						previousValue.Editions.Remove(this);
					}
					this._UploadedFile.Entity = value;
					if ((value != null))
					{
						value.Editions.Add(this);
						this._SmallCoverId = value.Id;
					}
					else
					{
						this._SmallCoverId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UploadedFile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UploadedFile_Edition1", Storage="_UploadedFile1", ThisKey="LargeCoverId", OtherKey="Id", IsForeignKey=true)]
		public UploadedFile UploadedFile1
		{
			get
			{
				return this._UploadedFile1.Entity;
			}
			set
			{
				UploadedFile previousValue = this._UploadedFile1.Entity;
				if (((previousValue != value) 
							|| (this._UploadedFile1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UploadedFile1.Entity = null;
						previousValue.Editions1.Remove(this);
					}
					this._UploadedFile1.Entity = value;
					if ((value != null))
					{
						value.Editions1.Add(this);
						this._LargeCoverId = value.Id;
					}
					else
					{
						this._LargeCoverId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UploadedFile1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookListMemberships(BookListMembership entity)
		{
			this.SendPropertyChanging();
			entity.Edition = this;
		}
		
		private void detach_BookListMemberships(BookListMembership entity)
		{
			this.SendPropertyChanging();
			entity.Edition = null;
		}
		
		private void attach_OrderLines(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.Edition = this;
		}
		
		private void detach_OrderLines(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.Edition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genre")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _SequenceIdentifier;
		
		private EntitySet<Book> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSequenceIdentifierChanging(int value);
    partial void OnSequenceIdentifierChanged();
    #endregion
		
		public Genre()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceIdentifier", DbType="Int NOT NULL")]
		public int SequenceIdentifier
		{
			get
			{
				return this._SequenceIdentifier;
			}
			set
			{
				if ((this._SequenceIdentifier != value))
				{
					this.OnSequenceIdentifierChanging(value);
					this.SendPropertyChanging();
					this._SequenceIdentifier = value;
					this.SendPropertyChanged("SequenceIdentifier");
					this.OnSequenceIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Book", Storage="_Books", ThisKey="Id", OtherKey="GenreId")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _ExternalId;
		
		private System.DateTime _CreatedAt;
		
		private System.Nullable<System.DateTime> _ClosedAt;
		
		private string _Name;
		
		private string _Address;
		
		private string _Email;
		
		private string _Phone;
		
		private string _City;
		
		private string _Postcode;
		
		private System.Nullable<decimal> _DistributionCost;
		
		private EntitySet<OrderLine> _OrderLines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnExternalIdChanging(System.Guid value);
    partial void OnExternalIdChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnClosedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedAtChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPostcodeChanging(string value);
    partial void OnPostcodeChanged();
    partial void OnDistributionCostChanging(System.Nullable<decimal> value);
    partial void OnDistributionCostChanged();
    #endregion
		
		public Order()
		{
			this._OrderLines = new EntitySet<OrderLine>(new Action<OrderLine>(this.attach_OrderLines), new Action<OrderLine>(this.detach_OrderLines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ExternalId
		{
			get
			{
				return this._ExternalId;
			}
			set
			{
				if ((this._ExternalId != value))
				{
					this.OnExternalIdChanging(value);
					this.SendPropertyChanging();
					this._ExternalId = value;
					this.SendPropertyChanged("ExternalId");
					this.OnExternalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="Date NOT NULL")]
		public System.DateTime CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedAt", DbType="Date")]
		public System.Nullable<System.DateTime> ClosedAt
		{
			get
			{
				return this._ClosedAt;
			}
			set
			{
				if ((this._ClosedAt != value))
				{
					this.OnClosedAtChanging(value);
					this.SendPropertyChanging();
					this._ClosedAt = value;
					this.SendPropertyChanged("ClosedAt");
					this.OnClosedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Postcode", DbType="NVarChar(50)")]
		public string Postcode
		{
			get
			{
				return this._Postcode;
			}
			set
			{
				if ((this._Postcode != value))
				{
					this.OnPostcodeChanging(value);
					this.SendPropertyChanging();
					this._Postcode = value;
					this.SendPropertyChanged("Postcode");
					this.OnPostcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistributionCost", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> DistributionCost
		{
			get
			{
				return this._DistributionCost;
			}
			set
			{
				if ((this._DistributionCost != value))
				{
					this.OnDistributionCostChanging(value);
					this.SendPropertyChanging();
					this._DistributionCost = value;
					this.SendPropertyChanged("DistributionCost");
					this.OnDistributionCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderLine", Storage="_OrderLines", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<OrderLine> OrderLines
		{
			get
			{
				return this._OrderLines;
			}
			set
			{
				this._OrderLines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderLines(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderLines(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderLine")]
	public partial class OrderLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _OrderId;
		
		private int _EditionId;
		
		private EntityRef<Edition> _Edition;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnEditionIdChanging(int value);
    partial void OnEditionIdChanged();
    #endregion
		
		public OrderLine()
		{
			this._Edition = default(EntityRef<Edition>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL")]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditionId", DbType="Int NOT NULL")]
		public int EditionId
		{
			get
			{
				return this._EditionId;
			}
			set
			{
				if ((this._EditionId != value))
				{
					if (this._Edition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEditionIdChanging(value);
					this.SendPropertyChanging();
					this._EditionId = value;
					this.SendPropertyChanged("EditionId");
					this.OnEditionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Edition_OrderLine", Storage="_Edition", ThisKey="EditionId", OtherKey="Id", IsForeignKey=true)]
		public Edition Edition
		{
			get
			{
				return this._Edition.Entity;
			}
			set
			{
				Edition previousValue = this._Edition.Entity;
				if (((previousValue != value) 
							|| (this._Edition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Edition.Entity = null;
						previousValue.OrderLines.Remove(this);
					}
					this._Edition.Entity = value;
					if ((value != null))
					{
						value.OrderLines.Add(this);
						this._EditionId = value.Id;
					}
					else
					{
						this._EditionId = default(int);
					}
					this.SendPropertyChanged("Edition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderLine", Storage="_Order", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderLines.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderLines.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Description;
		
		private string _Awards;
		
		private string _Translations;
		
		private string _Anthologies;
		
		private System.Nullable<int> _SmallImageId;
		
		private System.Nullable<int> _LargeImageId;
		
		private string _PhotographerCredit;
		
		private bool _IsVisible;
		
		private bool _HasPage;
		
		private EntitySet<PersonToArticle> _PersonToArticles;
		
		private EntitySet<Relation> _Relations;
		
		private EntityRef<UploadedFile> _UploadedFile;
		
		private EntityRef<UploadedFile> _UploadedFile1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAwardsChanging(string value);
    partial void OnAwardsChanged();
    partial void OnTranslationsChanging(string value);
    partial void OnTranslationsChanged();
    partial void OnAnthologiesChanging(string value);
    partial void OnAnthologiesChanged();
    partial void OnSmallImageIdChanging(System.Nullable<int> value);
    partial void OnSmallImageIdChanged();
    partial void OnLargeImageIdChanging(System.Nullable<int> value);
    partial void OnLargeImageIdChanged();
    partial void OnPhotographerCreditChanging(string value);
    partial void OnPhotographerCreditChanged();
    partial void OnIsVisibleChanging(bool value);
    partial void OnIsVisibleChanged();
    partial void OnHasPageChanging(bool value);
    partial void OnHasPageChanged();
    #endregion
		
		public Person()
		{
			this._PersonToArticles = new EntitySet<PersonToArticle>(new Action<PersonToArticle>(this.attach_PersonToArticles), new Action<PersonToArticle>(this.detach_PersonToArticles));
			this._Relations = new EntitySet<Relation>(new Action<Relation>(this.attach_Relations), new Action<Relation>(this.detach_Relations));
			this._UploadedFile = default(EntityRef<UploadedFile>);
			this._UploadedFile1 = default(EntityRef<UploadedFile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Awards", DbType="NVarChar(MAX)")]
		public string Awards
		{
			get
			{
				return this._Awards;
			}
			set
			{
				if ((this._Awards != value))
				{
					this.OnAwardsChanging(value);
					this.SendPropertyChanging();
					this._Awards = value;
					this.SendPropertyChanged("Awards");
					this.OnAwardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Translations", DbType="NVarChar(MAX)")]
		public string Translations
		{
			get
			{
				return this._Translations;
			}
			set
			{
				if ((this._Translations != value))
				{
					this.OnTranslationsChanging(value);
					this.SendPropertyChanging();
					this._Translations = value;
					this.SendPropertyChanged("Translations");
					this.OnTranslationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Anthologies", DbType="NVarChar(MAX)")]
		public string Anthologies
		{
			get
			{
				return this._Anthologies;
			}
			set
			{
				if ((this._Anthologies != value))
				{
					this.OnAnthologiesChanging(value);
					this.SendPropertyChanging();
					this._Anthologies = value;
					this.SendPropertyChanged("Anthologies");
					this.OnAnthologiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmallImageId", DbType="Int")]
		public System.Nullable<int> SmallImageId
		{
			get
			{
				return this._SmallImageId;
			}
			set
			{
				if ((this._SmallImageId != value))
				{
					if (this._UploadedFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSmallImageIdChanging(value);
					this.SendPropertyChanging();
					this._SmallImageId = value;
					this.SendPropertyChanged("SmallImageId");
					this.OnSmallImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LargeImageId", DbType="Int")]
		public System.Nullable<int> LargeImageId
		{
			get
			{
				return this._LargeImageId;
			}
			set
			{
				if ((this._LargeImageId != value))
				{
					if (this._UploadedFile1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLargeImageIdChanging(value);
					this.SendPropertyChanging();
					this._LargeImageId = value;
					this.SendPropertyChanged("LargeImageId");
					this.OnLargeImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotographerCredit", DbType="NVarChar(50)")]
		public string PhotographerCredit
		{
			get
			{
				return this._PhotographerCredit;
			}
			set
			{
				if ((this._PhotographerCredit != value))
				{
					this.OnPhotographerCreditChanging(value);
					this.SendPropertyChanging();
					this._PhotographerCredit = value;
					this.SendPropertyChanged("PhotographerCredit");
					this.OnPhotographerCreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVisible", DbType="Bit NOT NULL")]
		public bool IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasPage", DbType="Bit NOT NULL")]
		public bool HasPage
		{
			get
			{
				return this._HasPage;
			}
			set
			{
				if ((this._HasPage != value))
				{
					this.OnHasPageChanging(value);
					this.SendPropertyChanging();
					this._HasPage = value;
					this.SendPropertyChanged("HasPage");
					this.OnHasPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonToArticle", Storage="_PersonToArticles", ThisKey="Id", OtherKey="PersonId")]
		public EntitySet<PersonToArticle> PersonToArticles
		{
			get
			{
				return this._PersonToArticles;
			}
			set
			{
				this._PersonToArticles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Relation", Storage="_Relations", ThisKey="Id", OtherKey="PersonId")]
		public EntitySet<Relation> Relations
		{
			get
			{
				return this._Relations;
			}
			set
			{
				this._Relations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UploadedFile_Person", Storage="_UploadedFile", ThisKey="SmallImageId", OtherKey="Id", IsForeignKey=true)]
		public UploadedFile UploadedFile
		{
			get
			{
				return this._UploadedFile.Entity;
			}
			set
			{
				UploadedFile previousValue = this._UploadedFile.Entity;
				if (((previousValue != value) 
							|| (this._UploadedFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UploadedFile.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._UploadedFile.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._SmallImageId = value.Id;
					}
					else
					{
						this._SmallImageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UploadedFile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UploadedFile_Person1", Storage="_UploadedFile1", ThisKey="LargeImageId", OtherKey="Id", IsForeignKey=true)]
		public UploadedFile UploadedFile1
		{
			get
			{
				return this._UploadedFile1.Entity;
			}
			set
			{
				UploadedFile previousValue = this._UploadedFile1.Entity;
				if (((previousValue != value) 
							|| (this._UploadedFile1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UploadedFile1.Entity = null;
						previousValue.Persons1.Remove(this);
					}
					this._UploadedFile1.Entity = value;
					if ((value != null))
					{
						value.Persons1.Add(this);
						this._LargeImageId = value.Id;
					}
					else
					{
						this._LargeImageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UploadedFile1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonToArticles(PersonToArticle entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonToArticles(PersonToArticle entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Relations(Relation entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Relations(Relation entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonToArticle")]
	public partial class PersonToArticle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PersonId;
		
		private int _ArticleId;
		
		private int _SequenceIdentifier;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPersonIdChanging(int value);
    partial void OnPersonIdChanged();
    partial void OnArticleIdChanging(int value);
    partial void OnArticleIdChanged();
    partial void OnSequenceIdentifierChanging(int value);
    partial void OnSequenceIdentifierChanged();
    #endregion
		
		public PersonToArticle()
		{
			this._Article = default(EntityRef<Article>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", DbType="Int NOT NULL")]
		public int PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleId", DbType="Int NOT NULL")]
		public int ArticleId
		{
			get
			{
				return this._ArticleId;
			}
			set
			{
				if ((this._ArticleId != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIdChanging(value);
					this.SendPropertyChanging();
					this._ArticleId = value;
					this.SendPropertyChanged("ArticleId");
					this.OnArticleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceIdentifier", DbType="Int NOT NULL")]
		public int SequenceIdentifier
		{
			get
			{
				return this._SequenceIdentifier;
			}
			set
			{
				if ((this._SequenceIdentifier != value))
				{
					this.OnSequenceIdentifierChanging(value);
					this.SendPropertyChanging();
					this._SequenceIdentifier = value;
					this.SendPropertyChanged("SequenceIdentifier");
					this.OnSequenceIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_PersonToArticle", Storage="_Article", ThisKey="ArticleId", OtherKey="Id", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.PersonToArticles.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.PersonToArticles.Add(this);
						this._ArticleId = value.Id;
					}
					else
					{
						this._ArticleId = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonToArticle", Storage="_Person", ThisKey="PersonId", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonToArticles.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonToArticles.Add(this);
						this._PersonId = value.Id;
					}
					else
					{
						this._PersonId = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Relation")]
	public partial class Relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BookId;
		
		private int _PersonId;
		
		private int _RoleId;
		
		private int _SequenceIdentifier;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBookIdChanging(int value);
    partial void OnBookIdChanged();
    partial void OnPersonIdChanging(int value);
    partial void OnPersonIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnSequenceIdentifierChanging(int value);
    partial void OnSequenceIdentifierChanged();
    #endregion
		
		public Relation()
		{
			this._Book = default(EntityRef<Book>);
			this._Person = default(EntityRef<Person>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookId", DbType="Int NOT NULL")]
		public int BookId
		{
			get
			{
				return this._BookId;
			}
			set
			{
				if ((this._BookId != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIdChanging(value);
					this.SendPropertyChanging();
					this._BookId = value;
					this.SendPropertyChanged("BookId");
					this.OnBookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", DbType="Int NOT NULL")]
		public int PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceIdentifier", DbType="Int NOT NULL")]
		public int SequenceIdentifier
		{
			get
			{
				return this._SequenceIdentifier;
			}
			set
			{
				if ((this._SequenceIdentifier != value))
				{
					this.OnSequenceIdentifierChanging(value);
					this.SendPropertyChanging();
					this._SequenceIdentifier = value;
					this.SendPropertyChanged("SequenceIdentifier");
					this.OnSequenceIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Relation", Storage="_Book", ThisKey="BookId", OtherKey="Id", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Relations.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Relations.Add(this);
						this._BookId = value.Id;
					}
					else
					{
						this._BookId = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Relation", Storage="_Person", ThisKey="PersonId", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Relations.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Relations.Add(this);
						this._PersonId = value.Id;
					}
					else
					{
						this._PersonId = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Relation", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Relations.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Relations.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ShortName;
		
		private EntitySet<Relation> _Relations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    #endregion
		
		public Role()
		{
			this._Relations = new EntitySet<Relation>(new Action<Relation>(this.attach_Relations), new Action<Relation>(this.detach_Relations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="NVarChar(50)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Relation", Storage="_Relations", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<Relation> Relations
		{
			get
			{
				return this._Relations;
			}
			set
			{
				this._Relations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Relations(Relation entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Relations(Relation entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
}
#pragma warning restore 1591
